#include <iostream>
#include <string>
using namespace std;

class Node
{
public:
	char data;
	Node* next;
	Node()
	{
		data = '\0';
		next = NULL;
	}
};

class Stack
{
	Node* top;

public:
	Stack()
	{
		top = NULL;
	}

	bool isEmpty()
	{
		return(top == NULL);
	}

	void push(char item)
	{
		Node* newNode = new Node();
		newNode->data = item;
		newNode->next = top;
		top = newNode;
		if (isEmpty())
		{
			newNode->next = NULL; // unnecessary step because next is set to NULL in the constructor above
			top = newNode;
		}
		else
		{
			newNode->next = top;
			top = newNode;
		}

	}

	char pop()
	{
		int poped_item;
		Node* temp = new Node();
		temp = top;
		poped_item = top->data;
		top = top->next;
		delete temp;
		return poped_item;
	}

	//int peek()
	//{
	//	return top->data;
	//}

	void display()
	{
		Node* temp = new Node();
		temp = top;
		while (temp != NULL)
		{
			cout << temp->data << " ";
			temp = temp->next;
		}
		delete temp;
		cout << endl;
	}

	//int count()
	//{
	//	int counter = 0;
	//	Node* temp = new Node();
	//	temp = top;
	//	while (temp!=NULL)
	//	{
	//		counter++;
	//		temp = temp->next;
	//	}
	//	delete temp;
	//	return counter;
	//}
};

class Queue
{
public:
	Node* front;
	Node* rear;

	Queue()
	{
		front = rear = NULL;
	}

	bool isEmpty()
	{
		return (front == NULL);
	}

	void Enqueue(char item)
	{
		Node* newNode = new Node();
		newNode->data = item;
		if (isEmpty())
		{
			front = rear = newNode;
		}
		else
		{
			rear->next = newNode;
			rear = newNode;
		}
	}

	void Display()
	{
		if (isEmpty())
		{
			cout << "Queue is empty.\n";
		}
		else
		{
			Node* temp = new Node();
			temp = front;
			while (temp != NULL)
			{
				cout << temp->data << " ";
				temp = temp->next;
			}
			delete temp;
			cout << endl;
		}
	}

	void Dequeue()
	{
		if (isEmpty())
		{
			cout << "Queue is empty.\n";
		}
		else if (front == rear)
		{
			delete front;
			front = rear = NULL;
		}
		else
		{
			Node* temp = new Node();
			temp = front;
			front = front->next;
			delete temp;
		}
	}

	char getFront()
	{
		return front->data;
	}

	char getRear()
	{
		return rear->data;
	}

	int count()
	{
		int counter = 0;
		Node* temp = new Node();
		temp = front;
		while (temp != NULL)
		{
			counter++;
			temp = temp->next;
		}
		delete temp;
		return counter;
	}

	bool Search(int item)
	{
		bool isFound = false;
		Node* temp = new Node();
		temp = front;
		while (temp != NULL)
		{
			if (temp->data == item)
			{
				isFound = true;
			}
			temp = temp->next;
		}
		delete temp;
		return isFound;
	}

	void Clear()
	{
		while (!isEmpty())
		{
			Dequeue();
		}
	}

private:

};

int main()
{
	Queue q1, q2, q3;

	string string;
	getline(cin, string);
	int i = 0;
	while (string[i]!=NULL)
	{
		cout << string[i] << ',';
		i++;
	}


	return 0;
}