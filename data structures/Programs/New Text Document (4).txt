#include <iostream>
using namespace std;

class Node
{
public:
    int data;
    Node* next;
};

class Linked_List
{
public:
    Node* head;

    Linked_List()
    {
        head = NULL;
    }

    bool is_empty()
    {
        return(head == NULL);
    }

    void insert_first(int new_value)
    {
        Node* new_node = new Node();
        new_node->data = new_value;

        if (is_empty())
        {
            new_node->next = NULL;
            head = new_node;
        }
        else
        {
            new_node->next = head;
            head = new_node;
        }
    }

    void insert_before(int item, int new_value)
    {
        if (is_found(item))
        {
            // create new node and 
            // assign its data part to be new_value
            Node* newNode = new Node();
            newNode->data = new_value;

            // create new pointer to taverse the list
            // point it to head
            Node* current;
            current = head;

            while (current != NULL && current->next->data != item  );
            {
                current = current->next;
            }
            
            newNode->next = current->next;
            current->next = newNode;
        }
        else
        {
            cout << "Item not found!\n";
        }

    }

    void Display()
    {
        Node* current = head;
        while (current != NULL)
        {
            cout << current->data << " ";
            current = current->next;
        }
    }

    int count()
    {
        int counter = 0;
        Node* current = head;
        while (current != NULL)
        {
            counter++;
            current = current->next;
        }
        return counter;
    }

    bool is_found(int key)
    {
        bool found = false;
        Node* current = head;
        while (current != NULL)
        {
            if (current->data == key)
                found = true;
            current = current->next;
        }
        return found;
    }

};

int main()
{
    Linked_List newList;
    if (newList.is_empty())
        cout << "List is empty!\n";
    else
        cout << "List contains " << newList.count() << " items\n";

    int new_item = 0;
    while (new_item != -1)
    {
        cout << "Enter items to inset (and -1 to stop): \n";
        cin >> new_item;
        newList.insert_first(new_item);
        cout << "List contains " << newList.count() << " items\n";
        newList.Display();
        cout << endl;
    }

    int item, new_value;
    cout << "Enter item to item and new value to insert:\n";
    cin >> item;
    cin >> new_value;
    newList.insert_before(item, new_value);
    newList.Display();
    

    cout << "Enter to search for: \n";
    cin >> new_item;
    if (newList.is_found(new_item))
        cout << "Item is found\n";
    else
        cout << "Item not found!\n";

}
