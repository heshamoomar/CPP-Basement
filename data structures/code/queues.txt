#include <iostream>
using namespace std;

class Node
{
public:
	int data;
	Node* next;
	Node()
	{
		data = 0;
		next = NULL;
	}
};

class Queue
{
public:
	Node* front;
	Node* rear;

	Queue()
	{
		front = rear = NULL;
	}

	bool isEmpty()
	{
		return (front == NULL);
	}

	void Enqueue(int item)
	{
		Node* newNode = new Node();
		newNode->data = item;
		if (isEmpty())
		{
			front = rear = newNode;
		}
		else
		{
			rear->next = newNode;
			rear = newNode;
		}
	}

	void Display()
	{
		if (isEmpty())
		{
			cout << "Queue is empty.\n";
		}
		else
		{
			Node* temp = new Node();
			temp = front;
			while (temp != NULL)
			{
				cout << temp->data << " ";
				temp = temp->next;
			}
			delete temp;
			cout << endl;
		}
	}

	void Dequeue()
	{
		if (isEmpty())
		{
			cout << "Queue is empty.\n";
		}
		else if (front==rear)
		{
			delete front;
			front = rear = NULL;
		}
		else
		{
			Node* temp = new Node();
			temp = front;
			front = front->next;
			delete temp;
		}
	}

	int getFront()
	{
		return front->data;
	}

	int getRear()
	{
		return rear->data;
	}

	int count()
	{
		int counter = 0;
		Node* temp = new Node();
		temp = front;
		while (temp != NULL)
		{
			counter++;
			temp = temp->next;
		}
		delete temp;
		return counter;
	}

	bool Search(int item)
	{
		bool isFound = false;
		Node* temp = new Node();
		temp = front;
		while (temp != NULL)
		{
			if (temp->data==item)
			{
				isFound = true;
			}
			temp = temp->next;
		}
		delete temp;
		return isFound;
	}

	void Clear()
	{
		while (!isEmpty())
		{
			Dequeue();
		}
	}

private:

};




int main()
{
	Queue q1, q2, q3;
	int item, searched_item;
	//cout << q1.isEmpty() << endl;
	for (int i = 0; i < 5; i++)
	{
		cout << "Enter item to enqueue: ";
		cin >> item;
		q1.Enqueue(item);
	}
	//cout << q1.isEmpty() << endl;
	q1.Display();
	//q1.Dequeue();
	//q1.Dequeue();
	//q1.Display();
	cout << q1.getFront() << endl;
	cout << q1.getRear() << endl;
	cout << q1.count() << endl;
	cout << "Enter item to search for: ";
	cin >> searched_item;
	cout << q1.Search(searched_item);

	//q2.Enqueue(5);
	//cout << q2.count() << endl;
	//q2.Dequeue();
	//cout << q2.count() << endl;
	//q2.Display();



	return 0;
}
