// DP top-down approach (memoization) O(n)
#include<iostream>
using namespace std;
#define ll unsigned long long
const ll sz = 101;
ll result[sz];

//initially set the result array to -1
void init_result()
{
    for (ll i = 0; i < sz; i++)
        result[i] = -1;
    //-1 indicates that the subproblem result needs to be computed
}

ll Fibonacci(ll N)
{
    //if the subproblem is not computed yet,
    //recursively compute and store the result
    if (result[N] == -1)
    {
        if (N <= 1)
            result[N] = N;
        else
            result[N] = Fibonacci(N - 1) + Fibonacci(N - 2);
    }
    //Otherwise, just return the result
    return result[N];
}